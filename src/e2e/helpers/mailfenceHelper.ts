import { Page, expect } from '@playwright/test';
import path from 'path';
import fs from 'fs';

export class MailfenceHelper {
  // -------------------
  // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // -------------------
  async login(page: Page, username: string, password: string) {
    await page.fill('#username', username);
    await page.fill('#password', password);
    await page.click('button:has-text("Sign in")');
    await page.waitForSelector('text=Inbox', { timeout: 60000 });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Inbox');
  }

  // -------------------------------------------------
  // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
  // -------------------------------------------------
  async composeAndSendEmail(page: Page, subject: string, body: string, attachmentPath: string) {
    await page.click('[data-testid="sidebar:compose"]'); 
    await page.waitForSelector('.composer-container', { timeout: 10000 });
    console.log('‚úâÔ∏è –û—Ç–∫—Ä—ã–ª —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞');

    const toEmail = process.env.MAILFENCE_USER!;
    await page.fill('input[data-testid="composer:to"]', toEmail);
    await page.fill('input[data-testid="composer:subject"]', subject);
    console.log(`‚úâÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª—è To: ${toEmail} –∏ Subject: ${subject}`);

    const iframeLocator = page.frameLocator('iframe[data-testid="rooster-iframe"]');
    const bodyInIframe = iframeLocator.locator('body[contenteditable="true"]');
    if (await bodyInIframe.count() > 0) {
      await bodyInIframe.evaluate((el, value) => { el.innerHTML = value; }, body);
    } else {
      const bodyEditable = page.locator('div[contenteditable="true"]');
      if (await bodyEditable.count() > 0) {
        await bodyEditable.first().evaluate((el, value) => { el.innerHTML = value; }, body);
      } else {
        await page.fill('textarea[name="body"]', body).catch(() => {});
      }
    }
    console.log('‚úâÔ∏è –¢–µ–ª–æ –ø–∏—Å—å–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ');

    const fileInput = page.locator('input[type="file"]');
    if (await fileInput.count() > 0) {
      const absolutePath = path.isAbsolute(attachmentPath)
        ? attachmentPath
        : path.resolve(__dirname, '../test-data', attachmentPath);
      if (!fs.existsSync(absolutePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${absolutePath}`);
      }
      await fileInput.setInputFiles(absolutePath);
      console.log(`üìé –í–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${absolutePath}`);
    } else {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (input[type="file"]).');
    }

    await page.click('button[data-testid="composer:send-button"]');
    await page.waitForSelector('text=Message sent', { timeout: 20000 }).catch(() => {});
    console.log(`‚úÖ –ü–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "${subject}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
  }

  // -----------------------
  // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ Inbox
  // -----------------------
  async waitForEmailInInbox(page: Page, subject: string, timeout = 120000) {
    await page.click('text=Inbox').catch(() => {});
    await page.waitForSelector(`text=${subject}`, { timeout });
    console.log(`üì• –ü–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "${subject}" –ø–æ—è–≤–∏–ª–æ—Å—å –≤ Inbox`);
  }

  // -----------------------
  // –û—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ –ø–æ —Ç–µ–º–µ
  // -----------------------
  async openEmailBySubject(page: Page, subject: string) {
    await page.click(`text=${subject}`);
    await page.waitForSelector('text=Attachments', { timeout: 20000 }).catch(() => {});
    console.log(`üì¨ –ü–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "${subject}" –æ—Ç–∫—Ä—ã—Ç–æ`);
  }

  // -----------------------
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ Documents
  // -----------------------
  async saveAttachmentToDocuments(page: Page) {
    const downloadAllButton = page.locator('button[data-testid="attachment-list:download-all"]');
    await expect(downloadAllButton).toBeVisible({ timeout: 15000 });

    const downloadsPath = path.resolve(__dirname, '../../Documents');
    if (!fs.existsSync(downloadsPath)) fs.mkdirSync(downloadsPath, { recursive: true });

    const [download] = await Promise.all([
      page.waitForEvent('download'),
      downloadAllButton.click(),
    ]);

    const filePath = path.join(downloadsPath, await download.suggestedFilename());
    await download.saveAs(filePath);
    console.log(`üìÑ –í—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filePath}`);
  }

  // -----------------------
  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∏—Å—å–º–æ –≤ –∫–æ—Ä–∑–∏–Ω—É
  // -----------------------
  async moveEmailToTrash(page: Page) {
    const moveToTrashBtn = page.locator('button:has-text("Move to trash")').first();
    await expect(moveToTrashBtn).toBeVisible({ timeout: 10000 });
    await moveToTrashBtn.click();
    console.log('üóë –ü–∏—Å—å–º–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ Trash');
  }

  // -----------------------
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å—å–º–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  // -----------------------
  async verifyEmailInTrash(page: Page, subject: string) {
    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ–Ω—é "More", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const moreBtn = page.locator('button[title="More"]');
    if (await moreBtn.isVisible()) await moreBtn.click();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Trash
    const trashLink = page.locator('span[title^="Trash"]');
    await expect(trashLink).toBeVisible({ timeout: 10000 });
    await trashLink.click();
    console.log('üóë –ù–∞–∂–∞–ª–∏ –Ω–∞ Trash');

    // –õ–æ–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∏—Å—å–º–∞ –ø–æ —Ç–µ–º–µ
    const emailContainer = page.locator(`div[data-testid="message-item:${subject}"]`);

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–∏—Å—å–º—É
    await emailContainer.scrollIntoViewIfNeeded();

    const count = await emailContainer.count();

    if (count === 0) {
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
      const allSubjects = await page.$$eval(
        'div[data-testid^="message-item:"]',
        nodes => nodes.map(n => n.getAttribute('data-testid'))
      );
      console.log('üìÉ –í—Å–µ –ø–∏—Å—å–º–∞ –≤ Trash:', allSubjects);
      throw new Error(`‚ùå –ü–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "${subject}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Trash`);
    }

    console.log(`‚úÖ –ü–∏—Å—å–º–æ —Å —Ç–µ–º–æ–π "${subject}" –Ω–∞–π–¥–µ–Ω–æ –≤ Trash`);
  }
}
